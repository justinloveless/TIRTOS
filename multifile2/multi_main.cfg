/*
 * Copyright (c) 2015, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== empty.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');

/*
 *  Program.stack is ignored with IAR. Use the project options in
 *  IAR Embedded Workbench to alter the system stack size.
 */
if (!Program.build.target.$name.match(/iar/)) {
    /*
     *  Reducing the system stack size (used by ISRs and Swis) to reduce
     *  RAM usage.
     */
    Program.stack = 0x300;
}

/* ================ System configuration ================ */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
System.SupportProxy = SysMin;

/* Enable Semihosting for GNU targets to print to CCS console */
if (Program.build.target.$name.match(/gnu/)) {
    var SemiHost = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
}

/* ================ Logging configuration ================ */
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');

/* ================ Kernel configuration ================ */
/* Use Custom library */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = true;
BIOS.assertsEnabled = true;

/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
TIRTOS.useGPIO = true;
var clock0Params = new Clock.Params();
clock0Params.instance.name = "DataClock";
clock0Params.period = 101;
Program.global.DataClock = Clock.create("&DataClockFn", 101, clock0Params);
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "TxDataSema";
semaphore0Params.mode = Semaphore.Mode_BINARY;
Program.global.TxDataSema = Semaphore.create(null, semaphore0Params);
var timer0Params = new Timer.Params();
timer0Params.instance.name = "timer1";
timer0Params.period = 12;
Program.global.timer1 = Timer.create(1, "&lightSetInputFn", timer0Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "DataSema";
semaphore1Params.mode = Semaphore.Mode_BINARY;
Program.global.DataSema = Semaphore.create(null, semaphore1Params);
var timer2Params = new Timer.Params();
timer2Params.instance.name = "timer2";
timer2Params.period = 1400;
Program.global.timer2 = Timer.create(2, "&lightReadFn", timer2Params);
var semaphore2Params = new Semaphore.Params();
semaphore2Params.instance.name = "LightSema";
semaphore2Params.mode = Semaphore.Mode_BINARY;
Program.global.LightSema = Semaphore.create(null, semaphore2Params);
var semaphore3Params = new Semaphore.Params();
semaphore3Params.instance.name = "DriveSema";
semaphore3Params.mode = Semaphore.Mode_BINARY;
Program.global.DriveSema = Semaphore.create(null, semaphore3Params);
var clock1Params = new Clock.Params();
clock1Params.instance.name = "DriveClock";
clock1Params.period = 50;
Program.global.DriveClock = Clock.create("&DriveClockFn", 10, clock1Params);
var task0Params = new Task.Params();
task0Params.instance.name = "Drive";
task0Params.priority = 1;
Program.global.Drive = Task.create("&DriveFn", task0Params);
var semaphore4Params = new Semaphore.Params();
semaphore4Params.instance.name = "Uturn_Sema";
semaphore4Params.mode = Semaphore.Mode_BINARY;
Program.global.Uturn_Sema = Semaphore.create(null, semaphore4Params);
var semaphore5Params = new Semaphore.Params();
semaphore5Params.instance.name = "Rturn_Sema";
semaphore5Params.mode = Semaphore.Mode_BINARY;
Program.global.Rturn_Sema = Semaphore.create(null, semaphore5Params);
var timer3Params = new Timer.Params();
timer3Params.instance.name = "Rturn_timer";
timer3Params.period = 350000;
timer3Params.startMode = xdc.module("ti.sysbios.interfaces.ITimer").StartMode_USER;
timer3Params.runMode = xdc.module("ti.sysbios.interfaces.ITimer").RunMode_ONESHOT;
Program.global.Rturn_timer = Timer.create(-1, "&Rturn_timerFn", timer3Params);
var timer3Params0 = new Timer.Params();
timer3Params0.instance.name = "Uturn_timer";
timer3Params0.period = 550000;
timer3Params0.runMode = xdc.module("ti.sysbios.interfaces.ITimer").RunMode_ONESHOT;
timer3Params0.startMode = xdc.module("ti.sysbios.interfaces.ITimer").StartMode_USER;
timer3Params0.arg = null;
Program.global.Uturn_timer = Timer.create(-1, "&Uturn_timerFn", timer3Params0);
var semaphore6Params = new Semaphore.Params();
semaphore6Params.instance.name = "CmdBuffer_RWLock";
semaphore6Params.mode = Semaphore.Mode_BINARY;
Program.global.CmdBuffer_RWLock = Semaphore.create(1, semaphore6Params);
var semaphore7Params = new Semaphore.Params();
semaphore7Params.instance.name = "NewCmdSema";
semaphore7Params.mode = Semaphore.Mode_BINARY;
Program.global.NewCmdSema = Semaphore.create(null, semaphore7Params);
var semaphore8Params = new Semaphore.Params();
semaphore8Params.instance.name = "TX_RWLock";
semaphore8Params.mode = Semaphore.Mode_BINARY;
Program.global.TX_RWLock = Semaphore.create(1, semaphore8Params);
var semaphore9Params = new Semaphore.Params();
semaphore9Params.instance.name = "TxResponseSema";
semaphore9Params.mode = Semaphore.Mode_BINARY;
Program.global.TxResponseSema = Semaphore.create(null, semaphore9Params);
var semaphore10Params = new Semaphore.Params();
semaphore10Params.instance.name = "UARTDoneSema";
semaphore10Params.mode = Semaphore.Mode_BINARY;
Program.global.UARTDoneSema = Semaphore.create(null, semaphore10Params);
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "hwi_readChar";
Program.global.hwi_readChar = Hwi.create(22, "&hwi_readChar_ISR", hwi0Params);
var swi0Params = new Swi.Params();
swi0Params.instance.name = "swi_procChar";
swi0Params.priority = -1;
Program.global.swi_procChar = Swi.create("&swi_procChar_ISR", swi0Params);
var task1Params = new Task.Params();
task1Params.instance.name = "AcquireData";
task1Params.priority = 2;
Program.global.AcquireData = Task.create("&AcquireDataFn", task1Params);
var task0Params0 = new Task.Params();
task0Params0.instance.name = "CmdInt";
task0Params0.priority = 2;
Program.global.CmdInt = Task.create("&CmdIntFn", task0Params0);
var task3Params = new Task.Params();
task3Params.instance.name = "ReadLight";
task3Params.priority = 3;
Program.global.ReadLight = Task.create("&ReadLightFn", task3Params);
var task4Params = new Task.Params();
task4Params.instance.name = "RxCmd";
task4Params.priority = 3;
Program.global.RxCmd = Task.create("&RxCmdFn", task4Params);
var task5Params = new Task.Params();
task5Params.instance.name = "TxData";
task5Params.priority = 3;
Program.global.TxData = Task.create("&TxDataFn", task5Params);
var task0Params1 = new Task.Params();
task0Params1.instance.name = "TxResponse";
task0Params1.priority = 3;
Program.global.TxResponse = Task.create("&TxResponseFn", task0Params1);
LoggingSetup.loadTaskLogging = true;
LoggingSetup.loadSwiLogging = true;
LoggingSetup.loadHwiLogging = true;
LoggingSetup.sysbiosSemaphoreLogging = true;
LoggingSetup.enableTaskProfiler = true;
